# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: MIT
#

parameters:
  - name: vcpkgToolSha
    displayName: 'Custom SHA of vcpkg-tool to use rather than bootstrap'
    type: string
    default: 'use default'
  - name: jobName
    type: string
    default: 'x64_linux'
  - name: poolName
    type: string
  - name: tripletPattern
    displayName: 'Enable the triplets which contain this substring'
    type: string
    default: ''

jobs:
- job: x64_linux
  condition: and(succeeded(), contains('^${{ replace(parameters.jobName, '_', '-') }}$', '${{ parameters.tripletPattern }}'))
  pool:
    name: ${{ parameters.poolName }}
  workspace:
    clean: resources
  timeoutInMinutes: 1440 # 1 day
  dependsOn: mintsas
  variables:
  - name: WORKING_ROOT
    value: /mnt/vcpkg-ci
  - name: VCPKG_DOWNLOADS
    value: /mnt/vcpkg-ci/downloads
  - name: X_VCPKG_ASSET_SOURCES
    value: $[ dependencies.mintsas.outputs['mintsasstep.X_VCPKG_ASSET_SOURCES'] ]
  - name: X_VCPKG_BINARY_SOURCE_STUB
    value: $[ dependencies.mintsas.outputs['mintsasstep.X_VCPKG_BINARY_SOURCE_STUB'] ]
  steps:
    # Note: /mnt is the Azure machines' temporary disk.
  - bash: |
      sudo mkdir /home/agent -m=777
      sudo chown `id -u` /home/agent
      sudo mkdir ${{ variables.WORKING_ROOT }} -m=777
      sudo mkdir ${{ variables.VCPKG_DOWNLOADS }} -m=777
      exit 0
    displayName: 'Create working directories'
  - bash: ./bootstrap-vcpkg.sh
    displayName: 'Bootstrap vcpkg'
    condition: eq('use default', '${{ parameters.vcpkgToolSha }}')
  - bash: ./scripts/azure-pipelines/bootstrap-from-source.sh ${{ parameters.vcpkgToolSha }}
    displayName: "Build vcpkg with CMake"
    condition: ne('use default', '${{ parameters.vcpkgToolSha }}')
  - task: PowerShell@2
    displayName: '*** Test Modified Ports'
    env:
      X_VCPKG_ASSET_SOURCES: $(X_VCPKG_ASSET_SOURCES)
    inputs:
      failOnStderr: true
      filePath: 'scripts/azure-pipelines/test-modified-ports.ps1'
      arguments: "-Triplet ${{ replace(parameters.jobName, '_', '-') }} -BuildReason $(Build.Reason) -BinarySourceStub \"$(X_VCPKG_BINARY_SOURCE_STUB)\" -WorkingRoot ${{ variables.WORKING_ROOT }} -ArtifactStagingDirectory $(Build.ArtifactStagingDirectory)"
      pwsh: true
  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: failure logs for ${{ replace(parameters.jobName, '_', '-') }}"
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/failure-logs'
      ArtifactName: "failure logs for ${{ replace(parameters.jobName, '_', '-') }}"
    condition: ne(variables['FAILURE_LOGS_EMPTY'], 'True')
  - bash: |
      python3 scripts/file_script.py /mnt/vcpkg-ci/installed/vcpkg/info/
    displayName: 'Build a file list for all packages'
    condition: always()
  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: file lists for ${{ replace(parameters.jobName, '_', '-') }}"
    condition: always()
    inputs:
      PathtoPublish: scripts/list_files
      ArtifactName: "file lists for ${{ replace(parameters.jobName, '_', '-') }}"
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: ne(variables['XML_RESULTS_FILE'], '')
    inputs:
      testRunTitle: ${{ replace(parameters.jobName, '_', '-') }}
      testResultsFormat: xUnit
      testResultsFiles: $(XML_RESULTS_FILE)
      platform: ${{ replace(parameters.jobName, '_', '-') }}
      configuration: static
